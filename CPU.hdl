// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	DMux( in = true, sel = instruction[15], a = AType, b= CType);
	Or(a = AType, b = instruction[5], out = AInstruction);
	And(a = CType, b = instruction[4], out = CInstruction);

	Mux16(a = ALUout, b = instruction, sel = AType, out = InToARegister);
	ARegister(in = InToARegister, load = AInstruction, out = ARegisterOut, out[0..14] = addressM);
	
	Mux16(a = ARegisterOut, b = inM, sel = instruction[12], out = OutMux16);

	ALU(x = DRegisterOut, y = OutMux16, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = ALUout, zr = isZero, ng = isNegative, out = outM);
	And(a = CType, b = instruction[3], out = writeM);

	DRegister(in = ALUout, load= CInstruction, out = DRegisterOut); //load D register for ALU

	Or(a = isZero, b = isNegative, out = leqZero);
	Not(in = leqZero, out = isPositive);

	And(a = instruction[0], b = isPositive, out = JGT);  // is positive, then jump
	And(a = instruction[1], b = isZero, out = JEQ);   // is zero, then jump
	And(a = instruction[2], b = isNegative, out = JLT); // is negative, then jump
	Or(a = JEQ, b = JLT, out = JLE);
	Or(a = JGT,  b = JLE, out = JMP);  // to load PC if condition is met

	And(a = JMP, b = CType, out = DoJump);  // only jump id C instruction
	Not(in = DoJump, out = NoJump);  //increment if not load
	PC(in = ARegisterOut, load = DoJump, inc = NoJump, reset = reset, out[0..14] = pc);
}